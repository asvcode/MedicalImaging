{
  
    
        "post0": {
            "title": "Selective Mask",
            "content": "Goal: . The goals of this notebook are to: . look through how to select specify masks for an image | based on the dataset from this competition: Prostate cANcer graDe Assessment (PANDA) Challenge and you can view my kaggle kernel | . This notebook does not use DICOMS . Motivation . There more than 1 million new prostate cancer diagnoses reported every year, in fact prostate cancer is the second most common cancer among males worldwide that results in more than 350,000 deaths annually. Diagnosis of prostate cancer is based on the grading of prostate tissue biopsies. These tissue samples are examined by a pathologist and scored according to the Gleason grading system. . The grading process consists of finding and classifying cancer tissue into so-called Gleason patterns (3, 4, or 5) based on the architectural growth patterns of the tumor . (picture: courtesy: Kaggle) . After the biopsy is assigned a Gleason score, it is converted into an ISUP grade on a 1-5 scale .",
            "url": "https://asvcode.github.io/MedicalImaging/medical_imaging/prostate/kaggle/segmentation/2020/06/25/Selective-Mask.html",
            "relUrl": "/medical_imaging/prostate/kaggle/segmentation/2020/06/25/Selective-Mask.html",
            "date": " • Jun 25, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Understanding Photometric Interpretation",
            "content": "DICOM images allows for various relationships between the pixel data and intended interpretation of how the image is displayed. The values are found in tag (0028,0004) which lists the Photometric Interpretation of the pixel data. . By using the easily accessible SLIM_SIIM dataset from fastai&#39;s list of databases, one can explore the head of the dicom file which contains a list of tags pertaining to various aspects of the data. . Monochrome . pneumothorax_source = untar_data(URLs.SIIM_SMALL) items = get_dicom_files(pneumothorax_source, recurse=True, folders=&#39;sm&#39;) patient_one = dcmread(items[0]) patient_one . (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0016) SOP Class UID UI: Secondary Capture Image Storage (0008, 0018) SOP Instance UID UI: 1.2.276.0.7230010.3.1.4.8323329.6904.1517875201.850819 (0008, 0020) Study Date DA: &#39;19010101&#39; (0008, 0030) Study Time TM: &#39;000000.00&#39; (0008, 0050) Accession Number SH: &#39;&#39; (0008, 0060) Modality CS: &#39;CR&#39; (0008, 0064) Conversion Type CS: &#39;WSD&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 103e) Series Description LO: &#39;view: PA&#39; (0010, 0010) Patient&#39;s Name PN: &#39;16d7f894-55d7-4d95-8957-d18987f0e981&#39; (0010, 0020) Patient ID LO: &#39;16d7f894-55d7-4d95-8957-d18987f0e981&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1010) Patient&#39;s Age AS: &#39;62&#39; (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; (0018, 5101) View Position CS: &#39;PA&#39; (0020, 000d) Study Instance UID UI: 1.2.276.0.7230010.3.1.2.8323329.6904.1517875201.850818 (0020, 000e) Series Instance UID UI: 1.2.276.0.7230010.3.1.3.8323329.6904.1517875201.850817 (0020, 0010) Study ID SH: &#39;&#39; (0020, 0011) Series Number IS: &#34;1&#34; (0020, 0013) Instance Number IS: &#34;1&#34; (0020, 0020) Patient Orientation CS: &#39;&#39; (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0010) Rows US: 1024 (0028, 0011) Columns US: 1024 (0028, 0030) Pixel Spacing DS: [0.168, 0.168] (0028, 0100) Bits Allocated US: 8 (0028, 0101) Bits Stored US: 8 (0028, 0102) High Bit US: 7 (0028, 0103) Pixel Representation US: 0 (0028, 2110) Lossy Image Compression CS: &#39;01&#39; (0028, 2114) Lossy Image Compression Method CS: &#39;ISO_10918_1&#39; (7fe0, 0010) Pixel Data OB: Array of 126284 elements . You can specifically call any of the tags, for this dataset the Photometric Interpretation is MONOCHROME2 where the pixel data is represented as a single monochrome image plane. . patient_one.PhotometricInterpretation . &#39;MONOCHROME2&#39; . According to the DICOM Standards Committee this interpretation can only be used when Samples per Pixel (0028, 0002) has a value of 1. We can confirm this: . patient_one.SamplesPerPixel . 1 . patient_one.show() . More information about the different types of interpretations can be found here . YBR_FULL_422 . Looking at another dataset, this time from the SIIM-ISIC Melanoma Classification competition. . msource = Path(&#39;D:/Datasets/Melanoma/test&#39;) mitems = get_dicom_files(msource) patient_two = dcmread(mitems[0]) . patient_two . (0008, 0008) Image Type CS: [&#39;DERIVED&#39;, &#39;SECONDARY&#39;] (0008, 0014) Instance Creator UID UI: 1.3.6.1.4.1.5962.99.3 (0008, 0016) SOP Class UID UI: &#34;1.2.840.10008.5.1.4.1.1.77.1.4&#34; (0008, 0018) SOP Instance UID UI: 1.3.6.1.4.1.5962.99.1.7155.4713.1589853456601.1.1.0.0.0 (0008, 0020) Study Date DA: &#39;20200519&#39; (0008, 0023) Content Date DA: &#39;20200519&#39; (0008, 0030) Study Time TM: &#39;015736&#39; (0008, 0033) Content Time TM: &#39;015736&#39; (0008, 0050) Accession Number SH: &#39;&#39; (0008, 0060) Modality CS: &#39;&#34;XC&#34;&#39; (0008, 0070) Manufacturer LO: &#39;&#39; (0008, 0080) Institution Name LO: &#39;ISDIS&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 1030) Study Description LO: &#39;ISIC 2020 Grand Challenge image&#39; (0008, 2218) Anatomic Region Sequence 1 item(s) - (0008, 0100) Code Value SH: &#39;39937001&#39; (0008, 0102) Coding Scheme Designator SH: &#39;SCT&#39; (0008, 0104) Code Meaning LO: &#39;Skin&#39; (0010, 0010) Patient&#39;s Name PN: &#39;&#34;ISIC^0052060&#34;&#39; (0010, 0020) Patient ID LO: &#39;&#34;ISIC_0052060&#34;&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;M&#39; (0010, 1010) Patient&#39;s Age AS: &#39;065Y&#39; (0018, 0015) Body Part Examined CS: &#39;SKIN&#39; (0020, 000d) Study Instance UID UI: 1.3.6.1.4.1.5962.99.1.7155.4713.1589853456601.1.2.0 (0020, 000e) Series Instance UID UI: 1.3.6.1.4.1.5962.99.1.7155.4713.1589853456601.1.3.0.0 (0020, 0010) Study ID SH: &#39;ISIC_0052060&#39; (0020, 0011) Series Number IS: &#39;&#34;1&#34;&#39; (0020, 0013) Instance Number IS: &#39;&#34;1&#34;&#39; (0020, 0020) Patient Orientation CS: &#39;&#39; (0028, 0002) Samples per Pixel US: 3 (0028, 0004) Photometric Interpretation CS: &#39;YBR_FULL_422&#39; (0028, 0006) Planar Configuration US: 0 (0028, 0010) Rows US: 4000 (0028, 0011) Columns US: 6000 (0028, 0100) Bits Allocated US: 8 (0028, 0101) Bits Stored US: 8 (0028, 0102) High Bit US: 7 (0028, 0103) Pixel Representation US: 0 (0028, 0301) Burned In Annotation CS: &#39;YES&#39; (0028, 2110) Lossy Image Compression CS: &#39;01&#39; (0040, 0555) Acquisition Context Sequence 0 item(s) - (7fe0, 0010) Pixel Data OB: Array of 2513486 elements . patient_two.PhotometricInterpretation . &#39;YBR_FULL_422&#39; . patient_two.SamplesPerPixel . 3 . In this case the interpretation is YBR_FULL_422 and the pixel data represents a color image described by one luminance (Y) and two chrominance planes (CB and CR). CB and CR values are sampled horizontally at half the Y rate and as a result there are half as many CB and CR values as Y values. . The out of the box show function will not work on this dataset as it does not have Rescale Slope listed in the head so we have to create one . def show_one(file): &quot;&quot;&quot; function to view a dicom image when Rescale Slope is not noted&quot;&quot;&quot; pat = dcmread(file) trans = Transform(Resize(128)) dicom_create = PILDicom.create(file) dicom_transform = trans(dicom_create) return show_image(dicom_transform) . show_one(mitems[0]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1791e0fe148&gt; . But why does the image look unnatural? . This is because of the YBR_FULL_422 interpretation so we have to covert the interpretation from YBR_FULL_422 to RGB so that it can look a bit more realistic. . Pydicom provides a means of converting from one color space to another by using convert_color_space where it takes the (pixel array, current color space, desired color space) as attributes. This is done by accessing the pixel_array and then converting to the desired color space . from pydicom.pixel_data_handlers.util import convert_color_space . arr = patient_two.pixel_array convert = convert_color_space(arr, &#39;YBR_FULL_422&#39;, &#39;RGB&#39;) show_image(convert) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1791d88dbc8&gt; . That looks a lot better! .",
            "url": "https://asvcode.github.io/MedicalImaging/medical_imaging/dicom/fastai/2020/06/16/Understanding-Photometric-Interpretation.html",
            "relUrl": "/medical_imaging/dicom/fastai/2020/06/16/Understanding-Photometric-Interpretation.html",
            "date": " • Jun 16, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Getting to know DICOMS",
            "content": "DICOM Datasets . Here is a list of 3 DICOM datasets that you can play around with. Each of these 3 datasets have different attributes and shows how there can be a vast difference in what is contained in different DICOM datasets. . the SIIM_SMALL dataset ((250 DICOM files, ~30MB) is conveniently provided in the fastai library but is limited in some of its attributes for example it does not have RescaleIntercept or RescaleSlope and its pixel range is limited in the range of 0 and 255 | . Kaggle has an easily accessible (437MB) CT medical image dataset from the cancer imaging archive. The dataset consists of 100 images (512px by 512px) with pixel ranges from -2000 to +2000 | . The Thyroid Segmentation in Ultrasonography Dataset provides low quality (ranging from 253px by 253px) DICOM images where each DICOM image has multiple frames (average of 1000) | . #Load the dependancies from fastai2.basics import * from fastai2.callback.all import * from fastai2.vision.all import * from fastai2.medical.imaging import * import pydicom import seaborn as sns matplotlib.rcParams[&#39;image.cmap&#39;] = &#39;bone&#39; from matplotlib.colors import ListedColormap, LinearSegmentedColormap . Loading DICOMs which have 1 frame per file . The SIIM_SMALL dataset is a DICOM dataset where each DICOM file has a pixel_array that contains 1 image. In this case the show function within fastai.medical.imaging conveniently displays the image . source = untar_data(URLs.SIIM_SMALL) items = get_dicom_files(source) patient1 = dcmread(items[0]) patient1.show() . Loading an image from the CT medical image dataset which also contains 1 frame per DICOM file. This image is a slice of a CT scan looking at the lungs with the heart in the middle. . csource = Path(&#39;C:/PillView/NIH/data/dicoms&#39;) citems = get_dicom_files(csource) patient2 = dcmread(citems[0]) patient2.show() . However what if a DICOM dataset has multiple frames per DICOM file . Loading DICOMs which have multiple frames per file . The Thyroid Segmentation in Ultrasonography Dataset is a dataset where each DICOMfile has multiple frames per file. Using the same format as above to view an image: . tsource = Path(&#39;C:/PillView/NIH/data/thyroid&#39;) titems = get_dicom_files(tsource) patient3 = dcmread(titems[0]) #patient3.show() . This will result in a TypeError because the current show function does not have a means of displaying files with multiple frames . . Customizing the show function now checks to see if the file contains more than 1 frame and then displays the image accordingly. You can also choose how many frames to view (the default is 1). It was also noted that the show_images function does not accept colormaps and hence that function also had to be slightly modified . #updating to handle colormaps @delegates(subplots) def show_images(ims, nrows=1, ncols=None, titles=None, cmap=None, **kwargs): &quot;Show all images `ims` as subplots with `rows` using `titles`&quot; if ncols is None: ncols = int(math.ceil(len(ims)/nrows)) if titles is None: titles = [None]*len(ims) axs = subplots(nrows, ncols, **kwargs)[1].flat for im,t,ax in zip(ims, titles, axs): show_image(im, ax=ax, title=t, cmap=cmap) . #updating to handle multiple frames @patch @delegates(show_image, show_images) def show(self:DcmDataset, frames=1, scale=True, cmap=plt.cm.bone, min_px=-1100, max_px=None, **kwargs): px = (self.windowed(*scale) if isinstance(scale,tuple) else self.hist_scaled(min_px=min_px,max_px=max_px,brks=scale) if isinstance(scale,(ndarray,Tensor)) else self.hist_scaled(min_px=min_px,max_px=max_px) if scale else self.scaled_px) if px.ndim &gt; 2: gh=[] p = px.shape; print(f&#39;{p[0]} frames per file&#39;) for i in range(frames): u = px[i]; gh.append(u) show_images(gh, cmap=cmap, **kwargs) else: print(&#39;1 frame per file&#39;) show_image(px, cmap=cmap, **kwargs) . patient3.show(10) . 932 frames per file . The images now display the number of frames specified as well as how many frames there are in each file. It also now allows a cmap to be passed in. . patient3.show(10, cmap=plt.cm.ocean) . 932 frames per file . This function also works when each DICOM file only has 1 frame . patient2.show() . 1 frame per file . Saving files from multiple frames . The Thyroid segmentation dataset is broken down into 2 folders each containing 16 .dcm files each. It would be good to know what the total number of frames are within the dataset. . For this we use a custom function to get the total number of frames in the dataset and how many frames there are in each file . def get_num_frames(source): &quot;&quot;&quot;Get the number of frames in each DICOM&quot;&quot;&quot; &quot;&quot;&quot;Some DICOMs have multiple frames and this function helps to find the total number of frames in a DICOM dataset &quot;&quot;&quot; frame_list = [] h = get_dicom_files(source) for i, path in enumerate(h): test_im = h[i] j = dcmread(test_im) try: v = int(j.NumberOfFrames) except: v=1 frame_list.append(v) sl = sum(frame_list); ll = L(frame_list) return sl, ll . get_num_frames(tsource) . (31304, (#33) [932,942,1058,1120,958,1064,1134,1060,928,892...]) . In this case there are a total of 31304 frames within the dataset with each file having between 800 to 1100 frames. To view a range of frames: . gh = [] for i in range(0,100): u = patient3.pixel_array[i,:,:] gh.append(u) show_images(gh, nrows=10, ncols=10) . To save the frames into .jpg format you can use this function to extract frames from 1 file specifying the input source and the output . def get_frames(source, save_path): &quot;&quot;&quot;extract frames from DICOM file and save into specified location&quot;&quot;&quot; h = get_dicom_files(source) test_im = h[0] j = dcmread(test_im) try: frame = int(j.NumberOfFrames) print(f&#39;saving files in {save_path}&#39;) except: frame = 0 print(&#39;file has no frames&#39;) for i in range(frame): u = j.pixel_array[i,:,:] im = Image.fromarray(u) im.save(f&#39;{save_path}/image_{i}.jpg&#39;) return f&#39;Number of frames saved: {frame}&#39; . get_frames(tsource, tsource/&#39;Test&#39;) . saving files in C: PillView NIH data thyroid Test . &#39;Number of frames saved: 932&#39; . Another fastai function from_dicoms conveniently converts all the DICOM head attributes into a useable dataframe . t_df = pd.DataFrame.from_dicoms(titems) . Once converted you can now easily view various attributes about the dataset . #Plot 3 comparisons def plot_comparison(df, feature, feature1, feature2): &quot;Plot 3 comparisons from a dataframe&quot; fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (16, 4)) s1 = sns.countplot(df[feature], ax=ax1) s1.set_title(feature) s2 = sns.countplot(df[feature1], ax=ax2) s2.set_title(feature1) s3 = sns.countplot(df[feature2], ax=ax3) s3.set_title(feature2) plt.show() . plot_comparison(t_df, &#39;PatientSex&#39;, &#39;Columns&#39;, &#39;Rows&#39;) . Viewing DICOM tag values . To view the tag values within the header you can use the dir() function . patient3.dir() . [&#39;AccessionNumber&#39;, &#39;AcquisitionContextSequence&#39;, &#39;AcquisitionDateTime&#39;, &#39;AcquisitionDuration&#39;, &#39;AcquisitionTimeSynchronized&#39;, &#39;AnatomicRegionSequence&#39;, &#39;ApexPosition&#39;, &#39;BitsAllocated&#39;, &#39;BitsStored&#39;, &#39;BoneThermalIndex&#39;, &#39;BurnedInAnnotation&#39;, &#39;Columns&#39;, &#39;ContentDate&#39;, &#39;ContentTime&#39;, &#39;CranialThermalIndex&#39;, &#39;DepthOfScanField&#39;, &#39;DepthsOfFocus&#39;, &#39;DeviceSerialNumber&#39;, &#39;DimensionIndexSequence&#39;, &#39;DimensionOrganizationSequence&#39;, &#39;DimensionOrganizationType&#39;, &#39;FrameOfReferenceUID&#39;, &#39;HighBit&#39;, &#39;ImageComments&#39;, &#39;ImageOrientationPatient&#39;, &#39;ImagePositionPatient&#39;, &#39;ImageType&#39;, &#39;InstanceNumber&#39;, &#39;InstitutionName&#39;, &#39;InstitutionalDepartmentName&#39;, &#39;LargestImagePixelValue&#39;, &#39;LossyImageCompression&#39;, &#39;Manufacturer&#39;, &#39;ManufacturerModelName&#39;, &#39;MechanicalIndex&#39;, &#39;Modality&#39;, &#39;NumberOfFrames&#39;, &#39;OperatorsName&#39;, &#39;PatientBirthDate&#39;, &#39;PatientBirthTime&#39;, &#39;PatientID&#39;, &#39;PatientName&#39;, &#39;PatientOrientation&#39;, &#39;PatientSex&#39;, &#39;PerFrameFunctionalGroupsSequence&#39;, &#39;PhotometricInterpretation&#39;, &#39;PixelData&#39;, &#39;PixelRepresentation&#39;, &#39;PixelSpacing&#39;, &#39;PositionMeasuringDeviceUsed&#39;, &#39;PositionReferenceIndicator&#39;, &#39;PresentationLUTShape&#39;, &#39;ReferringPhysicianName&#39;, &#39;RescaleIntercept&#39;, &#39;RescaleSlope&#39;, &#39;Rows&#39;, &#39;SOPClassUID&#39;, &#39;SOPInstanceUID&#39;, &#39;SamplesPerPixel&#39;, &#39;SeriesDate&#39;, &#39;SeriesDescription&#39;, &#39;SeriesInstanceUID&#39;, &#39;SeriesNumber&#39;, &#39;SeriesTime&#39;, &#39;SharedFunctionalGroupsSequence&#39;, &#39;SmallestImagePixelValue&#39;, &#39;SoftTissueThermalIndex&#39;, &#39;SoftwareVersions&#39;, &#39;SpacingBetweenSlices&#39;, &#39;StationName&#39;, &#39;StudyDate&#39;, &#39;StudyID&#39;, &#39;StudyInstanceUID&#39;, &#39;StudyTime&#39;, &#39;SynchronizationFrameOfReferenceUID&#39;, &#39;SynchronizationTrigger&#39;, &#39;TransducerApplicationCodeSequence&#39;, &#39;TransducerBeamSteeringCodeSequence&#39;, &#39;TransducerGeometryCodeSequence&#39;, &#39;TransducerScanPatternCodeSequence&#39;, &#39;TransducerType&#39;, &#39;UltrasoundAcquisitionGeometry&#39;, &#39;ViewCodeSequence&#39;, &#39;VolumeFrameOfReferenceUID&#39;, &#39;VolumeToTransducerMappingMatrix&#39;] . Its worth pointing out that there may be additional information (however not always the case) where there may be a tag for ImageComments. This tag may contain information that may be useful in the modelling. In this case not really useful information except that MeVisLab was used to probably generate the image . patient3.ImageComments . &#39;MeVisLab&#39; . Understanding Tissue Densities . There are a couple of downsides to the SIMM_SLIM dataset because it does not have a number of attributes including RescaleIntercept and RescaleSlope and its pixel distribution is limited to between 0 and 255 pixels. In reality DICOM images have a far more wide-spread range of pixel values. . By using the CT medical image dataset we can now play around with other useful fastai.medical.imaging functionality. . patient2 is an image from this dataset . tensor_dicom = pixels(patient2) #convert into tensor print(f&#39;RescaleIntercept: {patient2.RescaleIntercept:1f} nRescaleSlope: {patient2.RescaleSlope:1f} nMax pixel: &#39; f&#39;{tensor_dicom.max()} nMin pixel: {tensor_dicom.min()} nShape: {tensor_dicom.shape}&#39;) . RescaleIntercept: -1024.000000 RescaleSlope: 1.000000 Max pixel: 1918.0 Min pixel: 0.0 Shape: torch.Size([512, 512]) . In this image the RescaleIntercept is -1024, the RescaleSlope is 1, the max and min pixels are 1918 and 0 respectively and the image size is 512 by 512 . Plotting a histogram of pixel intensities you can see where the bulk of pixels are located . plt.hist(tensor_dicom.flatten(), color=&#39;c&#39;) . (array([1.73881e+05, 1.82440e+04, 4.70700e+03, 3.24000e+03, 1.53940e+04, 3.50250e+04, 7.98600e+03, 2.62500e+03, 8.99000e+02, 1.43000e+02]), array([ 0. , 191.8, 383.6, 575.4, 767.2, 959. , 1150.8, 1342.6, 1534.4, 1726.2, 1918. ], dtype=float32), &lt;a list of 10 Patch objects&gt;) . The histogram shows that the minimal pixel value is 0 and the maximum pixel value is 1918. The histogram is predominantly bi-modal with the majority of pixels between the 0 and 100 pixels and between 750 and 1100 pixels. . This image has a RescaleIntercept of -1024 and a RescaleSlope of 1. These two values allows for transforming pixel values into Hounsfield Units(HU). Densities of different tissues on CT scans are measured in HUs . Most CT scans range from -1000HUs to +1000HUs where water is 0HUs, air is -1000HUs and the denser the tissues the higher the HU value. Metals have a much higher HU range +2000HUs so for medical imaging a range of -1000 to +1000HUs is suitable . The pixel values above do not correctly correspond to tissue densities. For example most of the pixels are between pixel values 0 and 100 which correspond to water but this image is predominantly showing the lungs which are filled with air. Air on the Hounsfield scale is -1000 HUs. . This is where RescaleIntercept and RescaleSlope are important. Fastai provides a convenient way scaled_px to rescale the pixels with respect to RescaleIntercept and RescaleSlope. . rescaled pixel = pixel * RescaleSlope + RescaleIntercept . tensor_dicom_scaled = scaled_px(patient2) #convert into tensor taking RescaleIntercept and RescaleSlope into consideration plt.hist(tensor_dicom_scaled.flatten(), color=&#39;c&#39;) . (array([1.73881e+05, 1.82440e+04, 4.70700e+03, 3.24000e+03, 1.53940e+04, 3.50250e+04, 7.98600e+03, 2.62500e+03, 8.99000e+02, 1.43000e+02]), array([-1024. , -832.2, -640.4, -448.6, -256.8, -65. , 126.8, 318.6, 510.4, 702.2, 894. ], dtype=float32), &lt;a list of 10 Patch objects&gt;) . print(f&#39;Max pixel: {tensor_dicom_scaled.max()} nMin pixel: {tensor_dicom_scaled.min()}&#39;) . Max pixel: 894.0 Min pixel: -1024.0 . After re-scaling the maximum pixel value is 894 and the minimum value is -1024 and we can now correctly see what parts of the image correspond to what parts of the body based on the Hounsfield scale. . Looking at the top end of the histogram what does the image look like with values over 300 HUs? . The show function has the capability of specifying max and min values . patient2.show(max_px=894, min_px=300, figsize=(5,5)) . 1 frame per file . HU values above +300 typically will show the bone stuctures within the image . patient2.show(max_px=250, min_px=-250, figsize=(5,5)) . 1 frame per file . Within this range you can now see the aorta and the parts of the heart(image middle) as well as muscle and fat. . patient2.show(max_px=-250, min_px=-600, figsize=(5,5)) . 1 frame per file . In this range you just make out outlines. The histogram does show that within this range there are not many pixels . patient2.show(max_px=-600, min_px=-1000, figsize=(5,5)) . 1 frame per file . Within this range you can clearly see the bronchi within the lungs . patient2.show(max_px=-900, min_px=-1024, figsize=(5,5)) . 1 frame per file . At this range you can now also clearly see the curve of the scanner. . The show function by default has a max_px value of None and a min_px value of -1100 . patient2.show(max_px=None, min_px=-1100, figsize=(5,5)) . 1 frame per file . Image re-scaling as done above is really for the benefit of humans. Computer screens can display about 256 shades of grey and the human eye is only capable of detecting about a 6% change in greyscale (ref) meaning the human eye can only detect about 17 different shades of grey. . DICOM images may have a wide range from -1000 to +1000 and for humans to be able to see relevant structures within the image a process of windowing is utilized. Fastai provides various dicom_windows so that only specific HU values are displayed on the screen. More about windowing can be found here . Bins . Where windowing is for the benefit of the human, computers produce better results from training when the data has a uniform distribution as mentioned in an article by Jeremy don&#39;t see like a radiologist . Looking back at the pixel distribution we can see that the image does not have a uniform distribution . plt.hist(tensor_dicom_scaled.flatten(), color=&#39;c&#39;) . (array([1.73881e+05, 1.82440e+04, 4.70700e+03, 3.24000e+03, 1.53940e+04, 3.50250e+04, 7.98600e+03, 2.62500e+03, 8.99000e+02, 1.43000e+02]), array([-1024. , -832.2, -640.4, -448.6, -256.8, -65. , 126.8, 318.6, 510.4, 702.2, 894. ], dtype=float32), &lt;a list of 10 Patch objects&gt;) . fastai has a function freqhist_hist that splits the range of pixel values into groups depending on what value you set for n_bins, such that each group has around the same number of pixels. . For example if you set n_bins to 1, the pixel values are split into 2 distinct pixel bins . ten_freq = tensor_dicom_scaled.freqhist_bins(n_bins=1) fh = patient2.hist_scaled(ten_freq) plt.hist(ten_freq.flatten(), color=&#39;c&#39;); show_image(fh, figsize=(7,7)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23dc63fbf48&gt; . In this case you see the 2 polar sides of the image at -1000HUs you see the air portions and at 500HUs you see the bone structures clearly but the distribution is still not fully acceptable for the machine learning model. . with n_bins at 100(this is the default number used by show) . ten_freq2 = tensor_dicom_scaled.freqhist_bins(n_bins=100) fh2 = patient2.hist_scaled(ten_freq2) plt.hist(ten_freq2.flatten(), color=&#39;c&#39;); show_image(fh2, figsize=(7,7)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23dc4bb62c8&gt; . with n_bins at 100000 the pixels are showing a more uniform distribution . ten_freq3 = tensor_dicom_scaled.freqhist_bins(n_bins=100000) fh3 = patient2.hist_scaled(ten_freq3) plt.hist(ten_freq3.flatten(), color=&#39;c&#39;); show_image(fh3, figsize=(7,7)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x23db3a86848&gt; . What effect does this have on training outcomes. That will be the topic of the next blog . fin .",
            "url": "https://asvcode.github.io/MedicalImaging/medical_imaging/dicom/fastai/2020/05/12/Getting-To-Know-DICOMS.html",
            "relUrl": "/medical_imaging/dicom/fastai/2020/05/12/Getting-To-Know-DICOMS.html",
            "date": " • May 12, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Starting with Medical Imaging",
            "content": "Goal: . The goals of this starter notebook are to: . use DICOMs as the image input | high level overview of what considerations need to be taken and what the results mean when creating a model that predicts medical conditions | . The dataset used is conveniently provided by fastai - SIIM-ACR Pneumothorax Segmentation dataset and contains 250 Dicom images (175 No Pneumothorax and 75 Pneumothorax) . Considerations: . patient overlap | sampling | evaluting AI models for medical use | . This notebook is based on this fastai notebook. For more information about DICOMs and fastai medical imaging you can click here . #load dependancies from fastai2.basics import * from fastai2.callback.all import * from fastai2.vision.all import * from fastai2.medical.imaging import * import pydicom import seaborn as sns matplotlib.rcParams[&#39;image.cmap&#39;] = &#39;bone&#39; . Load the Data . pneumothorax_source = untar_data(URLs.SIIM_SMALL) items = get_dicom_files(pneumothorax_source, recurse=True, folders=&#39;sm&#39;) df = pd.read_csv(pneumothorax_source/f&quot;labels_sm.csv&quot;) . items . (#26) [Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000000 - Copy.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000000.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000002.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000005.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000006 - Copy.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000006.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000007.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000008.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000009.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/sm/No Pneumothorax/000011.dcm&#39;)...] . Side Note: The SIIM_SMALL dataset has no duplicate patient IDs, has an equal number of males and females so I used a custom even smaller dataset to show the functionality of DicomSplit and DataSplit below . Viewing the Data . View Dicom . The show function is specifically tailored to display .dcm formats. By customizing the show function we have now view patient information with each image . @patch @delegates(show_image) def show_dinfo(self:DcmDataset, scale=True, cmap=plt.cm.bone, min_px=-1100, max_px=None, **kwargs): &quot;&quot;&quot;show function that prints patient attributes from DICOM head&quot;&quot;&quot; px = (self.windowed(*scale) if isinstance(scale,tuple) else self.hist_scaled(min_px=min_px,max_px=max_px,brks=scale) if isinstance(scale,(ndarray,Tensor)) else self.hist_scaled(min_px=min_px,max_px=max_px) if scale else self.scaled_px) print(f&#39;Patient Age: {self.PatientAge}&#39;) print(f&#39;Patient Sex: {self.PatientSex}&#39;) print(f&#39;Body Part Examined: {self.BodyPartExamined}&#39;) print(f&#39;Rows: {self.Rows} Columns: {self.Columns}&#39;) show_image(px, cmap=cmap, **kwargs) . patient = 7 sample = dcmread(items[patient]) sample.show_dinfo() . Patient Age: 31 Patient Sex: M Body Part Examined: CHEST Rows: 1024 Columns: 1024 . Create a Dataframe . DICOM formats contain alot of useful information but difficult to see image by image so we need to capture this information and create a dataframe for better viewing and data manipulation. . Create a dataframe Customize the functions so that we include what we want in our dataframe . #updating to accomodate def _dcm2dict2(fn, **kwargs): t = fn.dcmread() return fn, t.PatientID, t.PatientAge, t.PatientSex, t.BodyPartExamined, t.Modality, t.Rows, t.Columns, t.BitsStored, t.PixelRepresentation @delegates(parallel) def _from_dicoms2(cls, fns, n_workers=0, **kwargs): return pd.DataFrame(parallel(_dcm2dict2, fns, n_workers=n_workers, **kwargs)) pd.DataFrame.from_dicoms2 = classmethod(_from_dicoms2) . test_df = pd.DataFrame.from_dicoms2(items) test_df.columns=[&#39;file&#39;, &#39;PatientID&#39;, &#39;Age&#39;, &#39;Sex&#39;, &#39;Bodypart&#39;, &#39;Modality&#39;, &#39;Rows&#39;, &#39;Cols&#39;, &#39;BitsStored&#39;, &#39;PixelRep&#39; ] test_df.to_csv(&#39;test_df.csv&#39;) test_df.head() . file PatientID Age Sex Bodypart Modality Rows Cols BitsStored PixelRep . 0 C: Users avird .fastai data siim_small sm No Pneumothorax 000000 - Copy.dcm | 16d7f894-55d7-4d95-8957-d18987f0e981 | 62 | M | CHEST | CR | 1024 | 1024 | 8 | 0 | . 1 C: Users avird .fastai data siim_small sm No Pneumothorax 000000.dcm | 16d7f894-55d7-4d95-8957-d18987f0e981 | 62 | M | CHEST | CR | 1024 | 1024 | 8 | 0 | . 2 C: Users avird .fastai data siim_small sm No Pneumothorax 000002.dcm | 850ddeb3-73ac-45e0-96bf-7d275bc83782 | 52 | F | CHEST | CR | 1024 | 1024 | 8 | 0 | . 3 C: Users avird .fastai data siim_small sm No Pneumothorax 000005.dcm | e0fd6161-2b8d-4757-96bc-6cf620a993d5 | 65 | F | CHEST | CR | 1024 | 1024 | 8 | 0 | . 4 C: Users avird .fastai data siim_small sm No Pneumothorax 000006 - Copy.dcm | 99171908-3665-48e8-82c8-66d0098ce209 | 52 | F | CHEST | CR | 1024 | 1024 | 8 | 0 | . We can now view the information (note this for my custom dataset) . #Plot 3 comparisons def plot_comparison(df, feature, feature1, feature2): &quot;Plot 3 comparisons from a dataframe&quot; fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (16, 4)) s1 = sns.countplot(df[feature], ax=ax1) s1.set_title(feature) s2 = sns.countplot(df[feature1], ax=ax2) s2.set_title(feature1) s3 = sns.countplot(df[feature2], ax=ax3) s3.set_title(feature2) plt.show() . plot_comparison(test_df, &#39;PatientID&#39;, &#39;Sex&#39;, &#39;Bodypart&#39;) . Age comparison . def age_comparison(df, feature): &quot;Plot hisogram of age range in dataset&quot; fig, (ax1) = plt.subplots(1,1, figsize = (16, 4)) s1 = sns.countplot(df[feature], ax=ax1) s1.set_title(feature) plt.show() age_comparison(test_df, &#39;Age&#39;) . Modelling . Considerations: . patient overlap between train and val set | sampling - how many negative and postive cases are in the train/val split (class imbalance) | augmentations - consideration of what augmentations are used and why in some cases may not be useful | . Patient Overlap . It is important to know if there is going to be any patient overlap when creating the train and validation sets as this may lead to an overly optimistic test set. The great thing about DICOMs is that we can check to see if there are any duplicate patientIDs in the test and valid sets when we split our data . def DicomSplit(valid_pct=0.2, seed=None, **kwargs): &quot;Splits `items` between train/val with `valid_pct`&quot; &quot;and checks if identical patient IDs exist in both the train and valid sets&quot; def _inner(o, **kwargs): train_list=[]; valid_list=[] if seed is not None: torch.manual_seed(seed) rand_idx = L(int(i) for i in torch.randperm(len(o))) cut = int(valid_pct * len(o)) trn = rand_idx[cut:]; trn_p = o[rand_idx[cut:]] val = rand_idx[:cut]; val_p = o[rand_idx[:cut]] for i, im in enumerate(trn_p): trn = im.dcmread() patient_ID = trn.PatientID train_list.append(patient_ID) for j, jm in enumerate(val_p): val = jm.dcmread() vpatient_ID = val.PatientID valid_list.append(vpatient_ID) print(set(train_list) &amp; set(valid_list)) return rand_idx[cut:], rand_idx[:cut] return _inner . set_seed(7) trn,val = DicomSplit(valid_pct=0.2)(items) trn, val . {&#39;6224213b-a185-4821-8490-c9cba260a959&#39;} . ((#21) [2,13,9,12,11,24,8,14,16,6...], (#5) [19,18,3,23,17]) . The custom test dataset only has 26 images which is split in a test set of 24 and a valid set of 5 using valid_pct of 0.2. By customizing RandomSplitter into DicomSplit you can view to see if there are any duplicate PatientIDs. In this case there is a duplicate ID: 6224213b-a185-4821-8490-c9cba260a959 . Using set_seed allows for reproducible results and ensures we use the same seed when training . Sampling . This dataset has 2 classes Pneumothorax and No Pneumothorax, DataSplit looks at how many Pneumothorax and No Pneumothorax images are in the train and valid sets. This is to view how fair the train/val split is to ensure good model sampling . def DataSplit(valid_pct=0.2, seed=None, **kwargs): &quot;Check the number of each class in train and valid sets&quot; def _inner(o, **kwargs): train_list=[]; valid_list=[] if seed is not None: torch.manual_seed(seed) rand_idx = L(int(i) for i in torch.randperm(len(o))) cut = int(valid_pct * len(o)) trn_p = o[rand_idx[cut:]] val_p = o[rand_idx[:cut]] for p in enumerate(trn_p): b = str(p).split(&#39;/&#39;)[7] train_list.append(b) for q in enumerate(val_p): e = str(q).split(&#39;/&#39;)[7] valid_list.append(e) print(f&#39;train: {train_list} n valid: {valid_list}&#39;) return rand_idx[cut:], rand_idx[:cut] return _inner . using the same set_seed we can get reproducible results . set_seed(7) trn,val = DataSplit(valid_pct=0.2)(items) trn, val . train: [&#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;No Pneumothorax&#39;] valid: [&#39;Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;, &#39;Pneumothorax&#39;, &#39;No Pneumothorax&#39;] . ((#21) [2,13,9,12,11,24,8,14,16,6...], (#5) [19,18,3,23,17]) . With this test dataset (the train set has 14 No Pneumothorax and 5 Pneumothorax images and the valid set has 4 No Pneumothorax and 3 Pneumothorax images . &gt;&gt;Work in progress work on various techniques to help with unbalanced datasets especially true for medical image datasets where there are typically alot more images of &#39;normal&#39; compared to &#39;diseased&#39; (oversampling, k-fold) . Augmentations . img1 = (pneumothorax_source/&#39;chest1.png&#39;); img2 = (pneumothorax_source/&#39;chest2.png&#39;) . &gt;&gt;Work in progress Choosing the right augmentations is important in determing how it affects the sampling process. For example in some cases it may not be a good idea to flip images. . Here is an image of a &#39;normal&#39; patient in its correct orientation (heart showing in the middle right) . Image.open(img1) . If we flip the image . Image.open(img2) . We can now see the heart is middle left. If the classifier was looking to detect defects of the heart then this type of augmentation would not be suitable. . #clear out some memory import gc gc.collect() . 14734 . #switch back to the full dataset items = get_dicom_files(pneumothorax_source, recurse=True, folders=&#39;train&#39;) df = pd.read_csv(pneumothorax_source/f&quot;labels.csv&quot;) . xtra_tfms = [RandomResizedCrop(194)] batch_tfms = [*aug_transforms(do_flip=False, flip_vert=False, xtra_tfms=xtra_tfms), Normalize.from_stats(*imagenet_stats)] . set_seed(7) pneumothorax = DataBlock(blocks=(ImageBlock(cls=PILDicom), CategoryBlock), get_x=lambda x:pneumothorax_source/f&quot;{x[0]}&quot;, get_y=lambda x:x[1], splitter=RandomSplitter(valid_pct=0.2), item_tfms=Resize(256), batch_tfms=batch_tfms) dls = pneumothorax.dataloaders(df.values, bs=12, num_workers=0) . Check train and valid sizes . len(dls.train_ds), len(dls.valid_ds) . (200, 50) . net = xresnext50(pretrained=False, sa=True, act_cls=Mish, n_out=dls.c) learn = Learner(dls, net, loss_func=LabelSmoothingCrossEntropy(), opt_func=Adam, metrics=[accuracy], cbs=[ShowGraphCallback()]) . If you do not specifiy a loss function or optimization function fastai automatically allocates one. You can view the loss_func and opt_func as follows: . learn.loss_func . LabelSmoothingCrossEntropy() . learn.opt_func . &lt;function fastai2.optimizer.Adam(params, lr, mom=0.9, sqr_mom=0.99, eps=1e-05, wd=0.01, decouple_wd=True)&gt; . learn.lr_find() . SuggestedLRs(lr_min=0.00010000000474974513, lr_steep=0.0005754399462603033) . learn.unfreeze() learn.fit_one_cycle(3, slice(1e-3)) . epoch train_loss valid_loss accuracy time . 0 | 0.697180 | 0.693759 | 0.620000 | 00:24 | . 1 | 0.718116 | 0.737178 | 0.720000 | 00:25 | . 2 | 0.672629 | 0.627202 | 0.740000 | 00:24 | . def show_results2(self, ds_idx=1, dl=None, max_n=9, shuffle=False, **kwargs): if dl is None: dl = self.dls[ds_idx].new(shuffle=shuffle) b = dl.one_batch() t,a,preds = self.get_preds(dl=[b], with_decoded=True) print(f&#39;Acutal: {a} n Preds: {preds} n&#39;) self.dls.show_results(b, preds, max_n=max_n, **kwargs) . show_results2(learn, max_n=12, nrows=2, ncols=6) . Acutal: TensorCategory([0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1], dtype=torch.int32) Preds: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) . Model Evaluation . Because medical models are high impact it is important to know how good a model is at detecting a certain condition. . Accuracy . The above model has an accuracy of 74%. One needs to look deeper into how the accuracy of 74% was calculated and whether it is acceptable. . Accuracy is the probablity that the model is correct or | . Accuracy is the probability that the model is correct and the patient has the condition PLUS the probability that the model is correct and the patient does not have the condition | . False Positive &amp; False Negative . There are some other key terms that need to be used when evaluating medical models: . False Negative is an error in which a test result improperly indicates no presence of a condition (the result is negative), when in reality it is present. | . False Positive is an error in which a test result improperly indicates presence of a condition, such as a disease (the result is positive), when in reality it is not present | . Sensitivity &amp; Specificity . Sensitivity or True Positive Rate is where the model classifies a patient has the disease given the patient actually does have the disease. Sensitivity quantifies the avoidance of false negatives | . Example: A new test was tested on 10,000 patients, if the new test has a sensitivity of 90% the test will correctly detect 9,000 (True Positive) patients but will miss 1000 (False Negative) patients that have the condition but were tested as not having the condition . Specificity or True Negative Rate is where the model classifies a patient as not having the disease given the patient actually does not have the disease. Specificity quantifies the avoidance of false positives | . Understanding and using sensitivity, specificity and predictive values is a great paper if you are interested in learning more . PPV and NPV . Most medical testing is evaluated via PPV (Postive Predictive Value) or NPV (Negative Predictive Value). . PPV - if the model predicts a patient has a condition what is probabilty that the patient actually has the condition . | NPV - if the model predicts a patient does not have a condition what is the probability that the patient actually does not have the condition . | . The ideal value of the PPV, with a perfect test, is 1 (100%), and the worst possible value would be zero . The ideal value of the NPV, with a perfect test, is 1 (100%), and the worst possible value would be zero . Confusion Matrix . Plot a confusion matrix - note that this is plotted against the valid dataset size which is 75 in this case . interp = ClassificationInterpretation.from_learner(learn) losses,idxs = interp.top_losses() len(dls.valid_ds)==len(losses)==len(idxs) interp.plot_confusion_matrix(figsize=(7,7)) . upp, low = interp.confusion_matrix() tn, fp = upp[0], upp[1] fn, tp = low[0], low[1] print(tn, fp, fn, tp) . 33 3 10 4 . Sensitivity = True Positive/(True Positive + False Negative) . sensitivity = tp/(tp + fn) sensitivity . 0.2857142857142857 . In this case the model only has a sensitivity of 28% and hence is only capable of correctly detecting 28% True Positives(ie who have Pneumothorax) but will miss 72% of False Negatives (patients that actually have Pneumothorax but were told they did not! Not a good situation to be in). . This is also know as a Type II error . Specificity = True Negative/(False Positive + True Negative) . specificity = tn/(fp + tn) specificity . 0.9166666666666666 . In this case the model has a specificity of 91% and hence can correctly detect 91% of the time that a patient does not have Pneumothorax but will incorrectly classify that 9% of the patients have Pneumothorax (False Postive) but actually do not. . This is also known as a Type I error . Positive Predictive Value (PPV) . ppv = tp/(tp+fp) ppv . 0.5714285714285714 . In this case the model performs poorly in correctly predicting patients with Pneumothorax . Negative Predictive Value (NPV) . npv = tn/(tn+fn) npv . 0.7674418604651163 . This model is better at predicting patients with No Pneumothorax . Some of these metrics can be calculated using sklearn&#39;s classification report . interp.print_classification_report() . precision recall f1-score support No Pneumothorax 0.77 0.92 0.84 36 Pneumothorax 0.57 0.29 0.38 14 accuracy 0.74 50 macro avg 0.67 0.60 0.61 50 weighted avg 0.71 0.74 0.71 50 . Calculating Accuracy . The accuracy of this model as mentioned before is 74% - lets now calculate this! . We can also look at Accuracy as: . accuracy = sensitivity x prevalence + specificity * (1 - prevalence) . Prevalence is a statistical concept referring to the number of cases of a disease that are present in a particular population at a given time. . The prevalence in this case is how many patients in the valid dataset have the condition compared to the total number. To view the number of Pneuomothorax patients in the valid set . t= dls.valid_ds.cat #t[0] . There are 20 Pneumothorax images in the valid set hence the prevalance here is 20/75 = 0.27 . accuracy = (0.28 * 0.27) + (0.91 * (1 - 0.27)) accuracy . 0.7399 . By reviewing the metrics above, you can evaluate how good or bad your model is performing . fin .",
            "url": "https://asvcode.github.io/MedicalImaging/medical_imaging/dicom/model_evaluation/ppv/npv/specificity/sensitivity/2020/04/29/Starting-With-Medical-Imaging.html",
            "relUrl": "/medical_imaging/dicom/model_evaluation/ppv/npv/specificity/sensitivity/2020/04/29/Starting-With-Medical-Imaging.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Medical Imaging using Fastai",
            "content": "What are Dicom images? . DICOM(Digital Imaging and COmmunications in Medicine) is the de-facto standard that establishes rules that allow medical images(X-Ray, MRI, CT) and associated information to be exchanged between imaging equipment from different vendors, computers, and hospitals. The DICOM format provides a suitable means that meets health information exchange (HIE) standards for transmission of health related data among facilites and HL7 standards which is the messaging standard that enables clinical applications to exchange data. . . DICOM files typically have a .dcm extension and provides a means of storing data in separate &#39;tags&#39; such as patient information as well as image/pixel data. A DICOM file consists of a header and image data sets packed into a single file. The information within the header is organized as a constant and standardized series of tags. By extracting data from these tags one can access important information regarding the patient demographics, study parameters, etc . The header portion of a DICOM file most likely contains PHI(Protected Health Information) bearing in mind that pixel data may also contain PHI . 16 bit DICOM images have values ranging from -32768 to 32768 while 8-bit greyscale images store values from 0 to 255. The value ranges in DICOM images are useful as they correlate with the Hounsfield Scale which is a quantitative scale for describing radio density . Parts of a DICOM . Requirements . Requires installing pycidom . pip install pycidom | . and scikit-image . pip install scikit-image | . and kornia . pip install kornia | . Fastai provides an easy to access slim dicom dataset (250 DICOM files, ~30MB) from the SIIM-ACR Pneumothorax Segmentation dataset for us to experiment with dicom images. The file structure of the dataset is as follows: . . from fastai2.basics import * from fastai2.callback.all import * from fastai2.vision.all import * from fastai2.medical.imaging import * import pydicom . #Load the Data pneumothorax_source = untar_data(URLs.SIIM_SMALL) . Patching . get_dicom_files . Provides a convenient way of recursively loading .dcm images from a folder. By default the folders option is set to False but you could specify a specific folder if required . #get dicom files items = get_dicom_files(pneumothorax_source, recurse=True, folders=&#39;train&#39;) items . (#250) [Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000000.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000002.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000005.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000006.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000007.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000008.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000009.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000011.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000012.dcm&#39;),Path(&#39;C:/Users/avird/.fastai/data/siim_small/train/No Pneumothorax/000014.dcm&#39;)...] . dcmread . Pydicom is a python package for parsing DICOM files and makes it easy to covert DICOM files into pythonic structures for easier manipulation. Files are opened using pydicom.dcmread . img = items[10] dimg = dcmread(img) type(dimg) . pydicom.dataset.FileDataset . You can now view all the information of the DICOM file. Explanation of each element is beyond the scope of this tutorial but this site has some excellent information about each of the entries. Information is listed by the DICOM tag (eg: 0008, 0005) or DICOM keyword (eg: Specific Character Set) . dimg . (0008, 0005) Specific Character Set CS: &#39;ISO_IR 100&#39; (0008, 0016) SOP Class UID UI: Secondary Capture Image Storage (0008, 0018) SOP Instance UID UI: 1.2.276.0.7230010.3.1.4.8323329.6340.1517875197.696624 (0008, 0020) Study Date DA: &#39;19010101&#39; (0008, 0030) Study Time TM: &#39;000000.00&#39; (0008, 0050) Accession Number SH: &#39;&#39; (0008, 0060) Modality CS: &#39;CR&#39; (0008, 0064) Conversion Type CS: &#39;WSD&#39; (0008, 0090) Referring Physician&#39;s Name PN: &#39;&#39; (0008, 103e) Series Description LO: &#39;view: AP&#39; (0010, 0010) Patient&#39;s Name PN: &#39;13f40bdc-803d-4fe0-b008-21234c2be1c3&#39; (0010, 0020) Patient ID LO: &#39;13f40bdc-803d-4fe0-b008-21234c2be1c3&#39; (0010, 0030) Patient&#39;s Birth Date DA: &#39;&#39; (0010, 0040) Patient&#39;s Sex CS: &#39;F&#39; (0010, 1010) Patient&#39;s Age AS: &#39;74&#39; (0018, 0015) Body Part Examined CS: &#39;CHEST&#39; (0018, 5101) View Position CS: &#39;AP&#39; (0020, 000d) Study Instance UID UI: 1.2.276.0.7230010.3.1.2.8323329.6340.1517875197.696623 (0020, 000e) Series Instance UID UI: 1.2.276.0.7230010.3.1.3.8323329.6340.1517875197.696622 (0020, 0010) Study ID SH: &#39;&#39; (0020, 0011) Series Number IS: &#34;1&#34; (0020, 0013) Instance Number IS: &#34;1&#34; (0020, 0020) Patient Orientation CS: &#39;&#39; (0028, 0002) Samples per Pixel US: 1 (0028, 0004) Photometric Interpretation CS: &#39;MONOCHROME2&#39; (0028, 0010) Rows US: 1024 (0028, 0011) Columns US: 1024 (0028, 0030) Pixel Spacing DS: [0.168, 0.168] (0028, 0100) Bits Allocated US: 8 (0028, 0101) Bits Stored US: 8 (0028, 0102) High Bit US: 7 (0028, 0103) Pixel Representation US: 0 (0028, 2110) Lossy Image Compression CS: &#39;01&#39; (0028, 2114) Lossy Image Compression Method CS: &#39;ISO_10918_1&#39; (7fe0, 0010) Pixel Data OB: Array of 118256 elements . Some key pointers on the tag information above: . Pixel Data (7fe0 0010) - This is where the raw pixel data is stored. The order of pixels encoded for each image plane is left to right, top to bottom, i.e., the upper left pixel (labeled 1,1) is encoded first | Photometric Interpretation (0028, 0004) - aka color space. In this case it is MONOCHROME2 where pixel data is represented as a single monochrome image plane where the minimum sample value is intended to be displayed as black info | Samples per Pixel (0028, 0002) - This should be 1 as this image is monochrome. This value would be 3 if the color space was RGB for example | Bits Stored (0028 0101) - Number of bits stored for each pixel sample | Pixel Represenation (0028 0103) - can either be unsigned(0) or signed(1). The default is unsigned. This Kaggle notebook by Jeremy explains why BitsStored and PixelRepresentation are important | Lossy Image Compression (0028 2110) - 00 image has not been subjected to lossy compression. 01 image has been subjected to lossy compression. | Lossy Image Compression Method (0028 2114) - states the type of lossy compression used (in this case JPEG Lossy Compression) | . Important tags not included in this dataset: . Rescale Intercept (0028, 1052) - The value b in relationship between stored values (SV) and the output units. Output units = m*SV + b. | Rescale Slope (0028, 1053) - m in the equation specified by Rescale Intercept (0028,1052). | . The Rescale Intercept and Rescale Slope are applied to transform the pixel values of the image into values that are meaningful to the application. Calculating the new values usually follow a linear formula: . NewValue = (RawPixelValue * RescaleSlope) + RescaleIntercept | . and when the relationship is not linear a LUT(LookUp Table) is utilized. . By default pydicom reads pixel data as the raw bytes found in the file and typically PixelData is often not immediately useful as data may be stored in a variety of different ways: . The pixel values may be signed or unsigned integers, or floats | There may be multiple image frames | There may be multiple planes per frame (i.e. RGB) and the order of the pixels may be different These are only a few examples and more information can be found on the pycidom website | . dimg.PixelData[:200] . b&#39; xfe xff x00 xe0 x00 x00 x00 x00 xfe xff x00 xe0 xe0 xcd x01 x00 xff xd8 xff xdb x00C x00 x03 x02 x02 x02 x02 x02 x03 x02 x02 x02 x03 x03 x03 x03 x04 x06 x04 x04 x04 x04 x04 x08 x06 x06 x05 x06 t x08 n n t x08 t t n x0c x0f x0c n x0b x0e x0b t t r x11 r x0e x0f x10 x10 x11 x10 n x0c x12 x13 x12 x10 x13 x0f x10 x10 x10 xff xc0 x00 x0b x08 x04 x00 x04 x00 x01 x01 x11 x00 xff xc4 x00 x1d x00 x00 x02 x02 x03 x01 x01 x01 x00 x00 x00 x00 x00 x00 x00 x00 x00 x03 x04 x02 x05 x00 x01 x06 x07 x08 t xff xc4 x00] x10 x00 x01 x04 x01 x03 x02 x05 x01 x04 x05 x05 n x08 x0b x05 t x01 x00 x02 x03 x11 x04 x12!1 x05A x06 x13&#34;Qaq x142 x81 x91 x07#B xa1 xb1 x15R xc1 xd1 xd2 x08 x16$3b x92 x95 xb2 xb3 xe1%CSr x82 x93 xa2&#39; . Because of the complexity in interpreting PixelData, pydicom provides an easy way to get it in a convenient form: pixel_array which returns a numpy.ndarray containing the pixel data: . dimg.pixel_array, dimg.pixel_array.shape . (array([[ 2, 6, 5, ..., 3, 3, 2], [ 5, 9, 8, ..., 6, 5, 5], [ 5, 9, 9, ..., 6, 5, 5], ..., [ 49, 85, 80, ..., 123, 121, 69], [ 54, 88, 81, ..., 118, 115, 70], [ 17, 48, 39, ..., 46, 52, 27]], dtype=uint8), (1024, 1024)) . Class TensorDicom . Inherits from TensorImage . Class PILDicom . Inherits from PILBase . Opens a DICOM file from path fn or bytes fn and load it as a PIL Image. The DICOM is opened using pydicom.dcmread and accesses the pixel_array . type(PILDicom.create(img)) . fastai2.medical.imaging.PILDicom . pixels . Converts a pixel_array to a tensor . pixels(dimg) . tensor([[ 2., 6., 5., ..., 3., 3., 2.], [ 5., 9., 8., ..., 6., 5., 5.], [ 5., 9., 9., ..., 6., 5., 5.], ..., [ 49., 85., 80., ..., 123., 121., 69.], [ 54., 88., 81., ..., 118., 115., 70.], [ 17., 48., 39., ..., 46., 52., 27.]]) . scaled_pixel . pixels scaled by RescaleSlope and RescaleIntercept. The slim SIIM_SMALL dataset does not have RescaleSlope (0028,1053) or RescaleIntercept (0028,1052) in the dataset. . &gt;&gt; Side Note: Pixel Distribution . Having well scaled inputs is really important in getting good results from neural net training ref. This means having a normal or uniform distribution. The pixels in the DICOM image do not show a uniform distribution . px = dimg.pixels.flatten() plt.hist(px, bins=50, color=&#39;c&#39;); . In this case the image is showing multimodal distribution(having more than 2 peaks). Another case could be where the distribution is bimodal(having 2 distinct peaks). The functions below provide a means of splitting the range of pixel values into groups so that each group has an equal number of pixels . array_freqhist_bins . #Todo . Tensor.freqhist_bins . A function to split the range of pixel values into groups, such that each group has around the same number of pixels . Convert pydicom.dataset.FileDataset into a tensor . tensor_dicom = pixels(dimg) tensor_dicom . tensor([[ 2., 6., 5., ..., 3., 3., 2.], [ 5., 9., 8., ..., 6., 5., 5.], [ 5., 9., 9., ..., 6., 5., 5.], ..., [ 49., 85., 80., ..., 123., 121., 69.], [ 54., 88., 81., ..., 118., 115., 70.], [ 17., 48., 39., ..., 46., 52., 27.]]) . t_bin = tensor_dicom.freqhist_bins(n_bins=100) t_bin, t_bin.shape . (tensor([ 3., 4., 5., 6., 7., 8., 9., 10., 11., 13., 16., 21., 26., 31., 38., 45., 52., 57., 62., 65., 68., 70., 72., 74., 76., 78., 79., 81., 82., 83., 84., 86., 87., 88., 89., 90., 91., 92., 93., 94., 95., 96., 97., 98., 99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109., 110., 111., 112., 113., 115., 116., 117., 119., 120., 122., 123., 124., 126., 127., 129., 131., 132., 134., 136., 138., 140., 143., 145., 148., 151., 155., 158., 161., 163., 165., 167., 169., 171., 173., 175., 177., 179., 180., 182., 184., 186., 189., 192., 197., 203.]), torch.Size([100])) . freqhist_bins splits the pixels into bins, the number of bins set by n_bins. So for the above example: . freqhist_bins flattens out the image tensor (in this case 1024 by 1024 into a flattened tensor of size 1048576 (1024*1024) | setting n_bins to 1 for example means it will be split into 3 bins (the beginning, the end and the number of bins specified by n_bins | each bin is then scaled to values between 0 and 255 (in this case the bulk of pixels are grouped at 3, 103 and 203 | . with a n_bin of 1 . plt.hist(t_bin, bins=t_bin, color=&#39;c&#39;); plt.plot(t_bin, torch.linspace(0,1,len(t_bin)));dimg.show(t_bin) . with n_bins of 100 the histogram displays that each group has the same number of pixels and you can also notice that the quality of the image is different compared to the image above . plt.hist(t_bin, bins=t_bin, color=&#39;c&#39;); plt.plot(t_bin, torch.linspace(0,1,len(t_bin)));dimg.show(t_bin) . Tensor.hist_scaled_pt . A way of scaling tensors using CUDA . Tensor.hist_scaled . A way to scale a tensor of pixels evenly using freqhist_bins to values between 0 and 1. . tensor_dicom . tensor([[ 2., 6., 5., ..., 3., 3., 2.], [ 5., 9., 8., ..., 6., 5., 5.], [ 5., 9., 9., ..., 6., 5., 5.], ..., [ 49., 85., 80., ..., 123., 121., 69.], [ 54., 88., 81., ..., 118., 115., 70.], [ 17., 48., 39., ..., 46., 52., 27.]]) . The tensor has values between 0 and 255 . #Run to view - commented out to reduce file size #plt.hist(tensor_dicom, bins=100) . The above commented out code displays a histogram of pixel values which range from 0 to 255 . . Using hist_scaled gets values now scaled between 0 and 1 . tensor_hists = tensor_dicom.hist_scaled() tensor_hists . tensor([[0.0000, 0.0303, 0.0202, ..., 0.0000, 0.0000, 0.0000], [0.0202, 0.0606, 0.0505, ..., 0.0303, 0.0202, 0.0202], [0.0202, 0.0606, 0.0606, ..., 0.0303, 0.0202, 0.0202], ..., [0.1573, 0.3081, 0.2677, ..., 0.6566, 0.6414, 0.2071], [0.1657, 0.3333, 0.2727, ..., 0.6212, 0.5960, 0.2121], [0.1030, 0.1558, 0.1429, ..., 0.1530, 0.1616, 0.1232]]) . #plotting the scaled histogram #plt.hist(tensor_hists, bins=100) . Scaled histogram now has pixel values ranging from 0 to 1 . . Dataset.hist_scaled . dimg.pixel_array . array([[ 2, 6, 5, ..., 3, 3, 2], [ 5, 9, 8, ..., 6, 5, 5], [ 5, 9, 9, ..., 6, 5, 5], ..., [ 49, 85, 80, ..., 123, 121, 69], [ 54, 88, 81, ..., 118, 115, 70], [ 17, 48, 39, ..., 46, 52, 27]], dtype=uint8) . data_scaled = dimg.hist_scaled(min_px=1, max_px=10) data_scaled . tensor([[0.0000, 0.4286, 0.2857, ..., 0.0000, 0.0000, 0.0000], [0.2857, 0.8571, 0.7143, ..., 0.4286, 0.2857, 0.2857], [0.2857, 0.8571, 0.8571, ..., 0.4286, 0.2857, 0.2857], ..., [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000], [1.0000, 1.0000, 1.0000, ..., 1.0000, 1.0000, 1.0000]]) . #max_px = 10 plt.imshow(data_scaled, cmap=plt.cm.bone); . #max_px = 100 data_scaled2 = dimg.hist_scaled(min_px=1, max_px=100) plt.imshow(data_scaled2, cmap=plt.cm.bone) . &lt;matplotlib.image.AxesImage at 0x2472852ec48&gt; . &gt;&gt; Side Note: Windowing . DICOM images can contain a high amount of voxel values and windowing can be thought of as a means of manipulating these values in order to change the apperance of the image so particular structures are highlighted. A window has 2 values: . l = window level or center aka brightness . w = window width or range aka contrast . Example: from here . Brain Matter window . l = 40 (window center) w = 80 (window width) . Voxels displayed range from 0 to 80 . Calculating voxel values: . lowest_visible_value = window_center - window_width / 2 | highest_visible_value = window_center + window_width / 2 | . (lowest_visible_value = 40 - (80/2), highest_visible_value = 40 + (80/2)) . Hence all values above &gt;80 will be white and all values below 0 are black. . Dataset.windowed . Takes 2 values w and l . fastai conveniently provides a range of window width and centers (dicom_windows) for viewing common body areas: . brain=(80,40), subdural=(254,100), stroke=(8,32), brain_bone=(2800,600), brain_soft=(375,40), lungs=(1500,-600), mediastinum=(350,50), abdomen_soft=(400,50), liver=(150,30), spine_soft=(250,50), spine_bone=(1800,400) . plt.imshow(dimg.windowed(w=1500, l=-600), cmap=plt.cm.bone) . &lt;matplotlib.image.AxesImage at 0x247280734c8&gt; . plt.imshow(dimg.windowed(*dicom_windows.lungs), cmap=plt.cm.bone) . &lt;matplotlib.image.AxesImage at 0x24727ae4ec8&gt; . Example . img = items[10] dimg = dcmread(img) . Convert a DICOM image into tensors . tensor_dicom = pixels(dimg) tensor_dicom . tensor([[ 2., 6., 5., ..., 3., 3., 2.], [ 5., 9., 8., ..., 6., 5., 5.], [ 5., 9., 9., ..., 6., 5., 5.], ..., [ 49., 85., 80., ..., 123., 121., 69.], [ 54., 88., 81., ..., 118., 115., 70.], [ 17., 48., 39., ..., 46., 52., 27.]]) . View a portion of the image . e = tensor(tensor_dicom)[200:440,600:840] e.shape . torch.Size([240, 240]) . df = pd.DataFrame(e) #commented out conserve memory #df.style.set_properties(**{&#39;font-size&#39;:&#39;6pt&#39;}).background_gradient(&#39;Greys&#39;) . The dataframe created by df looks like this: . . dicom_windows = types.SimpleNamespace( test=(50,60) ) . r = e.windowed(w=50, l=60) . #This will produce a Dataframe of each pixel whether &#39;true&#39; or &#39;false&#39; #commented out due to high memory use test_e = e.mask_from_blur(dicom_windows.test, thresh=0.05, remove_max=True) #dfe = pd.DataFrame(test_e) #dfe.style.set_properties(**{&#39;font-size&#39;:&#39;6pt&#39;}).background_gradient(&#39;Greys&#39;) . . imk = [e,r, test_e] show_images(imk, titles=(&#39;orig&#39;, &#39;windowed&#39;, &#39;mask&#39;), figsize=(15,15)) . using show_images the images appear green because show_images and show_image by default use the &#39;viridis&#39; colormap and PILBase follows the same default colormap. Its important to note that the colormap choice is for the human benefit (it does not actually affect model training). However looking at the image above it looks very un-natural and hence better to change to another colormap choice. The &#39;bone&#39; colormap displays images with bone colors (which is what show uses) . matplotlib.rcParams[&#39;image.cmap&#39;] = &#39;bone&#39; . imk = [e,r, test_e] show_images(imk, titles=(&#39;orig&#39;, &#39;windowed&#39;, &#39;mask&#39;), figsize=(15,15)) . show . Inherits from show_image and is customized for displaying DICOM images . dimg.show(scale=True, cmap=plt.cm.bone, min_px=-1100, max_px=None, ax=None, figsize=(6,6), title=&#39;Test&#39;, ctx=None) . Jeremy mentioned in this article about using a &#39;rainbow colormap&#39; to fully utilize our computer&#39;s ability to display color . dimg.show(cmap=plt.cm.gist_ncar, figsize=(6,6)) . Class TensorCTScan . Inherits from PILBase . Class PILCTScan . Inherits from PILBase . Dataset.pct_in_window . Gets the % of pixels within a window w, l . For example using lungs as the dicom_window (1500,-600) we see that 80% of the pixels are within the window . dimg.pct_in_window(*dicom_windows.lungs) . 0.7996940612792969 . uniform_blur2d . #Todo . ims = dimg.hist_scaled(), uniform_blur2d(dimg.hist_scaled(),50) show_images(ims, titles=(&#39;orig&#39;, &#39;blurred&#39;), figsize=(10,10)) . gauss_blur2d . #Todo . Uses gaussian_blur2d kornia filter . gims = dimg.hist_scaled(), gauss_blur2d(dimg.hist_scaled(),50) show_images(gims, titles=(&#39;orig&#39;, &#39;gauss_blurred&#39;), figsize=(10,10)) . As explained in this notebook Jeremy uses these methods in cleaning the data in order to only retain information that is relevant. You use gauss_blur2d to blur the image and select the areas that are bright . px = dimg.windowed(*dicom_windows.lungs) show_image(px, figsize=(4,4)); . blurred = gauss_blur2d(px, 100) show_image(blurred, figsize=(4,4)); . show_image(blurred&gt;1); . Dataset.mask_from_blur . test = dimg.hist_scaled() blur = uniform_blur2d(dimg.hist_scaled(),50) ims = [test, blur] show_images(ims, titles=(&#39;orig&#39;, &#39;blurred&#39;), figsize=(10,10)) . dicom_windows.brain . (80, 40) . testblur = dimg.hist_scaled(min_px=0, max_px=100) blur = uniform_blur2d(dimg.hist_scaled(),50) test_mask = dimg.mask_from_blur(dicom_windows.brain, sigma=0.3, thresh=0.01, remove_max=True) ims = [testblur,test_mask] show_images(ims, titles=(&#39;orig&#39;, &#39;mask&#39;), figsize=(10,10)) . All values above +80 will be white and all values below 0 are black. . mask2bbox . #Todo . bbs = mask2bbox(test_mask) lo,hi = bbs print(bbs) print(lo[0], hi) . tensor([[ 0, 0], [1023, 1023]], device=&#39;cuda:0&#39;) tensor(0, device=&#39;cuda:0&#39;) tensor([1023, 1023], device=&#39;cuda:0&#39;) . crop_resize . #Todo . def _bbs2sizes(crops, init_sz, use_square=True): bb = crops.flip(1) print(f&#39;bb&quot; {bb} shape: {bb.shape}&#39;) szs = (bb[1]-bb[0]) print(f&#39;first szs: {szs} shape: {szs.shape}&#39;) if use_square: szs = szs.max(0)[0][None].repeat((2,1)) overs = (szs+bb[0])&gt;init_sz print(f&#39;overs: {overs}&#39;) bb[0][overs] = init_sz-szs[overs] lows = (bb[0]/float(init_sz)) return lows,szs/float(init_sz) . def crop_resize(x, crops, new_sz): # NB assumes square inputs. Not tested for non-square anythings! bs = x.shape[0] #number of channels print(bs) lows,szs = _bbs2sizes(crops, x.shape[-1]) print(f&#39;lows: {lows} n szs:{szs}&#39;) if not isinstance(new_sz,(list,tuple)): new_sz = (new_sz,new_sz) id_mat = tensor([[1.,0,0],[0,1,0]])[None].repeat((bs,1,1)).to(x.device) with warnings.catch_warnings(): warnings.filterwarnings(&#39;ignore&#39;, category=UserWarning) sp = F.affine_grid(id_mat, (bs,1,*new_sz))+1. grid = sp*unsqueeze(szs.t(),1,n=2)+unsqueeze(lows.t()*2.,1,n=2) return F.grid_sample(x.unsqueeze(1), grid-1) . Dataset.to_nchan . #Todo . show_images(dimg.to_nchan([dicom_windows.brain,dicom_windows.subdural,dicom_windows.abdomen_soft])) . show_images(dimg.to_nchan([dicom_windows.brain])) . Dataset.to_3chan . #Todo . Tensor.save_jpg . Save a tensor into a .jpg with specified windows . tensor_dicom = pixels(dimg) tensor_dicom.save_jpg(path=(pneumothorax_source/f&#39;train/01tensor.jpg&#39;), wins=[dicom_windows.lungs, dicom_windows.subdural]) . show_image(Image.open(pneumothorax_source/f&#39;train/01tensor.jpg&#39;)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x239905644c8&gt; . Dataset.save_jpg . Save a DICOM image into a .jpg . dimg.save_jpg(path=(pneumothorax_source/f&#39;train/01dicom.jpg&#39;), wins=[dicom_windows.lungs, dicom_windows.lungs]) . show_image(Image.open(pneumothorax_source/f&#39;train/01dicom.jpg&#39;)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2398cd85f08&gt; . Dataset.set_pixels . #Todo . Dataset.zoom . Zoom&#39;s image by specifying pixel ratio . dimg2 = dcmread(items[11]) dimg2.zoom(0.1) dimg2.show() . dimg2.zoom(0.5) dimg2.show() . Dataset.zoom_to . dimg2 = dcmread(items[11]) dimg2.shape, dimg2.show() . ((1024, 1024), None) . dimg2.zoom_to(90) dimg2.shape, dimg2.show() . ((90, 90), None) .",
            "url": "https://asvcode.github.io/MedicalImaging/medical_imaging/dicom/fastai/2020/04/28/Medical-Imaging-Using-Fastai.html",
            "relUrl": "/medical_imaging/dicom/fastai/2020/04/28/Medical-Imaging-Using-Fastai.html",
            "date": " • Apr 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Amrit Virdee . I am a prior Insight Data Science AI Fellow, pharmacist with a Masters in Health Informatics, presented and moderated at HIMSS, pitched at AWS Startups and Startup SanDiego and proud father of 2. . . . .",
          "url": "https://asvcode.github.io/MedicalImaging/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://asvcode.github.io/MedicalImaging/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}